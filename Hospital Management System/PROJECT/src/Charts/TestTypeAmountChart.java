/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package Charts;

/**
 *
 * @author Ritik
 */
import Model.MainAdmin;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.chart.labels.CategoryItemLabelGenerator;

import javax.swing.*;
import java.awt.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import org.jfree.chart.axis.CategoryLabelPositions;

public class TestTypeAmountChart extends JFrame {
    
    private static MainAdmin admin = new MainAdmin();
    public TestTypeAmountChart() {
        initUI();
    }

    private void initUI() {
        setTitle("Total Amount Generated by Test Type");
        setSize(800, 600);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(EXIT_ON_CLOSE);

        // Create a bar chart based on the dataset
        JFreeChart chart = createChart(createDataset());

        // Create a ChartPanel to display the chart
        ChartPanel chartPanel = new ChartPanel(chart);
        chartPanel.setPreferredSize(new Dimension(600, 400));

        // Add the ChartPanel to the JFrame
        add(chartPanel);

        // Set visible
        setVisible(true);
    }

    private JFreeChart createChart(CategoryDataset dataset) {
        JFreeChart chart = ChartFactory.createBarChart(
                "Total Amount Generated by Test Type",
                "Test Type",
                "Total Amount",
                dataset,
                PlotOrientation.VERTICAL,
                true,
                true,
                false
        );

        // Customize the chart if needed
        chart.setBackgroundPaint(Color.white);

        CategoryPlot plot = (CategoryPlot) chart.getPlot();
        plot.setDomainGridlinesVisible(true);

        CategoryAxis xAxis = plot.getDomainAxis();
            xAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_45); // Set the angle for category labels


        BarRenderer renderer = (BarRenderer) plot.getRenderer();
        renderer.setBaseItemLabelGenerator(new CategoryItemLabelGenerator() {
            @Override
            public String generateRowLabel(CategoryDataset dataset, int row) {
                return dataset.getRowKey(row).toString();
            }

            @Override
            public String generateColumnLabel(CategoryDataset dataset, int column) {
                return dataset.getColumnKey(column).toString();
            }

            @Override
            public String generateLabel(CategoryDataset dataset, int row, int column) {
                return dataset.getValue(row, column).toString();
            }
        });
        renderer.setBaseItemLabelsVisible(true);

        return chart;
    }

    private CategoryDataset createDataset() {
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        Connection connection = null;

        try {
            // Create an instance of MainAdmin to get database connection parameters
            MainAdmin admin = new MainAdmin();
            connection = DriverManager.getConnection(admin.getDbUrl(), admin.getDbUsername(), admin.getDbPassword());

            // Execute SQL query to retrieve total amount by test type
            String query = "SELECT Type_Of_Test, SUM(Cost_of_Test) AS TotalAmount FROM TestRequest GROUP BY Type_Of_Test";

            try (PreparedStatement preparedStatement = connection.prepareStatement(query);
                 ResultSet resultSet = preparedStatement.executeQuery()) {

                while (resultSet.next()) {
                    String testType = resultSet.getString("Type_Of_Test");
                    int totalAmount = resultSet.getInt("TotalAmount");
                    dataset.addValue(totalAmount, "Total Amount", testType);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            // Handle the exception appropriately in your application
        } finally {
            // Close the connection in the finally block to ensure it's always closed
            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }

        return dataset;
    }

    public static void main(String[] args) {
        // Run the application on the Event Dispatch Thread (EDT)
        SwingUtilities.invokeLater(() -> {
            new TestTypeAmountChart();
        });
    }
}

