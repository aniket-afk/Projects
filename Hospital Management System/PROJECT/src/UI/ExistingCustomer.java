/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI;
import Model.HospitalPatient;
import Model.MainAdmin;
import java.awt.CardLayout;
import java.sql.SQLException;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import java.sql.ResultSet;
import java.sql.PreparedStatement;
import java.util.Vector;
import java.sql.Connection; 
import java.sql.DriverManager;
import java.text.SimpleDateFormat;
import java.util.Date;
/**
 *
 * @author shrikrishnanayak
 */
public class ExistingCustomer extends javax.swing.JPanel {
    JPanel workArea;
    MainAdmin admin;
    /**
     * Creates new form ExistingCustomer
     */
    public ExistingCustomer(JPanel workArea, MainAdmin admin) {
        initComponents();
        this.workArea = workArea;
        this.admin = admin;
        populateDepartmentComboBox();
        populatePatientTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtStaffPassword7 = new javax.swing.JLabel();
        txtReason = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtStaffPassword = new javax.swing.JLabel();
        txtPatAge = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txtAddress = new javax.swing.JTextField();
        txtStaffPassword1 = new javax.swing.JLabel();
        txtStaffPassword2 = new javax.swing.JLabel();
        txtContact = new javax.swing.JTextField();
        txtGmail = new javax.swing.JTextField();
        txtStaffPassword3 = new javax.swing.JLabel();
        txtStaffPassword4 = new javax.swing.JLabel();
        txtPatHistory = new javax.swing.JTextField();
        txtStaffPassword5 = new javax.swing.JLabel();
        txtStaffPassword6 = new javax.swing.JLabel();
        jAllergy = new javax.swing.JComboBox<>();
        jDoctor = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jDepartment = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        JPatName = new javax.swing.JComboBox<>();
        txtGender = new javax.swing.JTextField();
        jDob = new com.toedter.calendar.JDateChooser();
        jButton4 = new javax.swing.JButton();
        txtBloodGroup = new javax.swing.JTextField();

        setBackground(new java.awt.Color(0, 102, 102));

        jLabel3.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel3.setText("PATIENT AGE :");

        jLabel4.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel4.setText("PATIENT DATE OF BIRTH :");

        txtStaffPassword7.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        txtStaffPassword7.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        txtStaffPassword7.setText("REASON TO VISIT :");

        jLabel5.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel5.setText("PATIENT GENDER :");

        txtStaffPassword.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        txtStaffPassword.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        txtStaffPassword.setText("PATIENT ADDRESS :");

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("NEW PATIENT");

        txtStaffPassword1.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        txtStaffPassword1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        txtStaffPassword1.setText("PATIENT CONTACT :");

        txtStaffPassword2.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        txtStaffPassword2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        txtStaffPassword2.setText("PATIENT GMAIL :");

        txtContact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtContactActionPerformed(evt);
            }
        });

        txtStaffPassword3.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        txtStaffPassword3.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        txtStaffPassword3.setText("PATIENT BLOOG GROUP :");

        txtStaffPassword4.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        txtStaffPassword4.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        txtStaffPassword4.setText("PATIENT MEDICAL HISTORY :");

        txtStaffPassword5.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        txtStaffPassword5.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        txtStaffPassword5.setText("ALLERGY :");

        txtStaffPassword6.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        txtStaffPassword6.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        txtStaffPassword6.setText("DOCTOR :");

        jAllergy.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "YES", "NO" }));

        jLabel6.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel6.setText("DEPARTMENT :");

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel2.setText("PATIENT NAME :");

        jDepartment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDepartmentActionPerformed(evt);
            }
        });

        jButton1.setText("ADD");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        JPatName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JPatNameActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jButton4.setText("BACK");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(89, 89, 89)
                        .addComponent(jButton4)
                        .addGap(234, 234, 234)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(260, 260, 260)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jDob, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)
                            .addComponent(JPatName, 0, 279, Short.MAX_VALUE)
                            .addComponent(txtGender))
                        .addGap(294, 294, 294)
                        .addComponent(txtBloodGroup, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(77, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 1128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(53, 53, 53)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(txtStaffPassword2)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel3)
                                        .addComponent(jLabel2)
                                        .addComponent(jLabel4)
                                        .addComponent(jLabel5)
                                        .addComponent(txtStaffPassword))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(41, 41, 41)
                                        .addComponent(txtStaffPassword1))))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtContact)
                                .addComponent(txtAddress)
                                .addComponent(txtPatAge)
                                .addComponent(txtGmail, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE))
                            .addGap(65, 65, 65)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtStaffPassword4)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(26, 26, 26)
                                            .addComponent(txtStaffPassword3)))
                                    .addGap(29, 29, 29)
                                    .addComponent(txtPatHistory, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel6)
                                        .addComponent(txtStaffPassword5)
                                        .addComponent(txtStaffPassword7)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(txtStaffPassword6)
                                            .addGap(11, 11, 11)))
                                    .addGap(29, 29, 29)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jAllergy, 0, 265, Short.MAX_VALUE)
                                        .addComponent(jDepartment, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jDoctor, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txtReason))))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addContainerGap(43, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(127, 127, 127)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JPatName, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBloodGroup, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(67, 67, 67)
                .addComponent(jDob, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(txtGender, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 368, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(56, 56, 56)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(txtStaffPassword3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtStaffPassword4, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtPatHistory, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(txtStaffPassword5, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(txtStaffPassword6, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jAllergy, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jDepartment, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(28, 28, 28)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtReason, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtStaffPassword7, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(49, 49, 49)
                                    .addComponent(txtPatAge, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(18, 18, 18)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtStaffPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtStaffPassword1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtContact, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtStaffPassword2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtGmail, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addContainerGap(172, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtContactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtContactActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtContactActionPerformed

    private void jDepartmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDepartmentActionPerformed
        String selectedDepartment = (String) jDepartment.getSelectedItem();
        if (selectedDepartment != null) {
            populateDoctorComboBox(selectedDepartment);
        }
    }//GEN-LAST:event_jDepartmentActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String name = (String) JPatName.getSelectedItem();
        String age = txtPatAge.getText();
        Date dob = jDob.getDate();
        String gender = txtGender.getText();
        String address = txtAddress.getText();
        String contact = txtContact.getText();
        String email = txtGmail.getText();
        String bloodGroup = txtBloodGroup.getText();
        String medicalHistory = txtPatHistory.getText();
        String allergy = (String) jAllergy.getSelectedItem();
        String department = (String) jDepartment.getSelectedItem();
        String doctor = (String) jDoctor.getSelectedItem();
        String reasonToVisit = txtReason.getText();

        HospitalPatient newPatient = new HospitalPatient(name, age, dob, gender, address, contact, email, bloodGroup, medicalHistory, allergy, department, doctor, reasonToVisit);

        insertPatientIntoDatabase(newPatient);
        clearFields();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void JPatNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JPatNameActionPerformed
        String selectedPatient = (String) JPatName.getSelectedItem();
        if (selectedPatient != null) {
            displayPatientDetails(selectedPatient);
        }
    }//GEN-LAST:event_JPatNameActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        HospitalStaffLanding hl =  new HospitalStaffLanding(workArea, admin);
        workArea.add("HospitalStaffLanding",hl);
        CardLayout layout = (CardLayout) workArea.getLayout();
        layout.next(workArea);// TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> JPatName;
    private javax.swing.JComboBox<String> jAllergy;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox<String> jDepartment;
    private com.toedter.calendar.JDateChooser jDob;
    private javax.swing.JComboBox<String> jDoctor;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextField txtBloodGroup;
    private javax.swing.JTextField txtContact;
    private javax.swing.JTextField txtGender;
    private javax.swing.JTextField txtGmail;
    private javax.swing.JTextField txtPatAge;
    private javax.swing.JTextField txtPatHistory;
    private javax.swing.JTextField txtReason;
    private javax.swing.JLabel txtStaffPassword;
    private javax.swing.JLabel txtStaffPassword1;
    private javax.swing.JLabel txtStaffPassword2;
    private javax.swing.JLabel txtStaffPassword3;
    private javax.swing.JLabel txtStaffPassword4;
    private javax.swing.JLabel txtStaffPassword5;
    private javax.swing.JLabel txtStaffPassword6;
    private javax.swing.JLabel txtStaffPassword7;
    // End of variables declaration//GEN-END:variables

    
        public void populatePatientTable() {
        try {
            MainAdmin admin = new MainAdmin();
            Connection conn = DriverManager.getConnection(admin.getDbUrl(), admin.getDbUsername(), admin.getDbPassword());
            String sql = "SELECT DISTINCT name FROM Patients"; // Replace with your actual table and column names
            PreparedStatement pstmt = conn.prepareStatement(sql);
            ResultSet rs = pstmt.executeQuery();

            Vector<String> patientNames = new Vector<>();
            while (rs.next()) {
                patientNames.add(rs.getString("name")); // Replace 'patient_name' with your actual column name
            }

            JPatName.setModel(new DefaultComboBoxModel<>(patientNames));
            // Close resources
            rs.close();
            pstmt.close();
            conn.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
        
        public void displayPatientDetails(String patientName) {
        try {
            MainAdmin admin = new MainAdmin();
            Connection conn = DriverManager.getConnection(admin.getDbUrl(), admin.getDbUsername(), admin.getDbPassword());
            String sql = "SELECT age, dob, gender, address, contact, email, bloodGroup, medicalHistory FROM Patients WHERE name = ?"; // Adjust as per your schema
            PreparedStatement pstmt = conn.prepareStatement(sql);
            pstmt.setString(1, patientName);
            ResultSet rs = pstmt.executeQuery();
            
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");

            if (rs.next()) {
                txtPatAge.setText(rs.getString("age"));
                String dateString = rs.getString("dob");
                Date dob = null;
                if (dateString != null) {
                    dob = dateFormat.parse(dateString); // parse the date string
                }
                jDob.setDate(dob);
                txtGender.setText(rs.getString("gender"));
                txtAddress.setText(rs.getString("address"));
                txtContact.setText(rs.getString("contact"));
                txtGmail.setText(rs.getString("email"));
                txtBloodGroup.setText(rs.getString("bloodGroup"));
                txtPatHistory.setText(rs.getString("medicalHistory"));
                
            }

            // Close resources
            rs.close();
            pstmt.close();
            conn.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void populateDepartmentComboBox() {
        Connection conn = null;
        PreparedStatement pst = null;
        ResultSet rs = null;

        try {
            conn = DriverManager.getConnection(admin.getDbUrl(), admin.getDbUsername(), admin.getDbPassword());
            String sql = "SELECT department FROM Department"; // Adjust the column name and table name as per your database schema
            pst = conn.prepareStatement(sql);
            rs = pst.executeQuery();

            while (rs.next()) {
                jDepartment.addItem(rs.getString("department"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Database error: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            try {
                if (rs != null) rs.close();
                if (pst != null) pst.close();
                if (conn != null) conn.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
    
    private void populateDoctorComboBox(String department) {
        jDoctor.removeAllItems();
        Connection conn = null;
        PreparedStatement pst = null;
        ResultSet rs = null;

        try {
            conn = DriverManager.getConnection(admin.getDbUrl(), admin.getDbUsername(), admin.getDbPassword());
            String sql = "SELECT name FROM Doctors WHERE department = ?"; // Adjust the column name and table name as per your database schema
            pst = conn.prepareStatement(sql);
            pst.setString(1, department);
            rs = pst.executeQuery();

            while (rs.next()) {
                jDoctor.addItem(rs.getString("name"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Database error: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            try {
                if (rs != null) rs.close();
                if (pst != null) pst.close();
                if (conn != null) conn.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
    
    private void insertPatientIntoDatabase(HospitalPatient patient) {
        Connection conn = null;
        PreparedStatement pst = null;

        try {
            conn = DriverManager.getConnection(admin.getDbUrl(), admin.getDbUsername(), admin.getDbPassword());
            String sql = "INSERT INTO Patients (name, age, dob, gender, address, contact, email, bloodGroup, medicalHistory, allergy, department, doctor, reasonToVisit) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            pst = conn.prepareStatement(sql);

            pst.setString(1, patient.getName());
            pst.setString(2, patient.getAge());
            pst.setDate(3, new java.sql.Date(patient.getDob().getTime())); // Convert java.util.Date to java.sql.Date
            pst.setString(4, patient.getGender());
            pst.setString(5, patient.getAddress());
            pst.setString(6, patient.getContact());
            pst.setString(7, patient.getEmail());
            pst.setString(8, patient.getBloodGroup());
            pst.setString(9, patient.getMedicalHistory());
            pst.setString(10, patient.getAllergy());
            pst.setString(11, patient.getDepartment());
            pst.setString(12, patient.getDoctor());
            pst.setString(13, patient.getReasonToVisit());

            int result = pst.executeUpdate();
            if (result > 0) {
                JOptionPane.showMessageDialog(null, "Patient added successfully.");
            } else {
                JOptionPane.showMessageDialog(null, "Failed to add patient.", "Database Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Database error: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            try {
                if (pst != null) pst.close();
                if (conn != null) conn.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
    
    private void clearFields() {
    
        txtPatAge.setText("");
        txtGender.setText("");
        txtAddress.setText("");
        txtContact.setText("");
        txtGmail.setText("");
        txtBloodGroup.setText("");
        txtPatHistory.setText("");
        txtReason.setText("");
        jDob.setDate(null);
        JPatName.setSelectedIndex(0);
        jAllergy.setSelectedIndex(0);
        jDepartment.setSelectedIndex(0);
        jDoctor.setSelectedIndex(0);
    }
}

