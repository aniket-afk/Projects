/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI.LabAdmin;


import Model.MainAdmin;
import com.mysql.cj.xdevapi.Statement;
import java.awt.CardLayout;
import javax.swing.JScrollPane;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ritik
 */


public class ManageStaffJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageStaffJPanel
     */
    private JPanel MainWorkArea;
    MainAdmin admin;
    public ManageStaffJPanel(JPanel MainWorkArea, MainAdmin admin) {
        initComponents();
        this.admin=admin;
        this.MainWorkArea= MainWorkArea;
        // Fetch data from the database and populate the table
        fetchDataFromDatabase();
        
    }
    
    
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblStaff = new javax.swing.JTable();
        btnUpdate = new javax.swing.JButton();
        btnAddNewStaffMember = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 102, 102));
        setPreferredSize(new java.awt.Dimension(700, 700));

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("LIST OF STAFF MEMBERS");

        tblStaff.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Id_Number", "Name", "Age", "Department", "Username"
            }
        ));
        tblStaff.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblStaff);

        btnUpdate.setText("UPDATE ");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnAddNewStaffMember.setText("+ ADD NEW STAFF MEMBER");
        btnAddNewStaffMember.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewStaffMemberActionPerformed(evt);
            }
        });

        btnRemove.setText("REMOVE");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 93, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 492, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(9, 9, 9))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnUpdate)
                        .addGap(18, 18, 18)
                        .addComponent(btnRemove))
                    .addComponent(btnAddNewStaffMember, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnRemove, btnUpdate});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(btnBack))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnAddNewStaffMember, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(92, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnAddNewStaffMember, btnRemove, btnUpdate});

    }// </editor-fold>//GEN-END:initComponents

    private void btnAddNewStaffMemberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewStaffMemberActionPerformed
        // TODO add your handling code here:
        NewStaffMemberJPanel panel =  new NewStaffMemberJPanel(MainWorkArea,admin);
        MainWorkArea.add("NewStaffMemberJPanel",panel);
        CardLayout layout = (CardLayout) MainWorkArea.getLayout();
        layout.next(MainWorkArea);
        
    }//GEN-LAST:event_btnAddNewStaffMemberActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
         int selectedRowIndex = tblStaff.getSelectedRow();
        
       if(selectedRowIndex<0){
           JOptionPane.showMessageDialog(this,"Please select a row to View");
        return;
       }
       int id = (int) tblStaff.getValueAt(selectedRowIndex, 0);
        String name = (String) tblStaff.getValueAt(selectedRowIndex, 1);
         int age = (int) tblStaff.getValueAt(selectedRowIndex, 2);
        String department = (String) tblStaff.getValueAt(selectedRowIndex, 3);
        String role = (String) tblStaff.getValueAt(selectedRowIndex, 4);
        String username = (String) tblStaff.getValueAt(selectedRowIndex, 5);
        
       
         UpdateStaffJPanel updatePanel = new UpdateStaffJPanel(MainWorkArea, admin);
       updatePanel.setStaffData(id, name, age, department, role, username);

        MainWorkArea.add("UpdateStaffJPanel", updatePanel);
        CardLayout layout = (CardLayout) MainWorkArea.getLayout();
        layout.next(MainWorkArea);
        
        
        
        
        
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tblStaff.getModel();
        int selectedRowIndex = tblStaff.getSelectedRow();
        
       if(selectedRowIndex<0){
           JOptionPane.showMessageDialog(this,"Please select a row to Delete");
        return;
       }
       else{
            int idToDelete = (int) model.getValueAt(selectedRowIndex, 0); // Assuming the first column is the identifier

        // Remove the selected row from the JTable
        model.removeRow(selectedRowIndex);

        // Remove the corresponding record from the database
        removeRecordFromDatabase(idToDelete);
           
       }
    }
       
    
    
    private void removeRecordFromDatabase(int id) {
        Connection conn = null;
        PreparedStatement pst = null;

        try {
            conn = DriverManager.getConnection(admin.getDbUrl(), admin.getDbUsername(), admin.getDbPassword());
            String sql = "DELETE FROM Lab_Staff_Details WHERE Id_Number = ?";
            pst = conn.prepareStatement(sql);
            pst.setInt(1, id);

            int rowsAffected = pst.executeUpdate();

            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(this, "Record deleted successfully.");
            } else {
                JOptionPane.showMessageDialog(this, "Failed to delete record.", "Database Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            // Close resources
            try {
                if (pst != null) pst.close();
                if (conn != null) conn.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    

    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        LabAdminJPanel panel =  new LabAdminJPanel(MainWorkArea, admin);
        MainWorkArea.add("LabAdminJPanel",panel);
        CardLayout layout = (CardLayout) MainWorkArea.getLayout();
        layout.next(MainWorkArea);

    }//GEN-LAST:event_btnBackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddNewStaffMember;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblStaff;
    // End of variables declaration//GEN-END:variables

    private void fetchDataFromDatabase() {
      Connection conn = null;
        PreparedStatement pst = null;

        try {
            
            conn = DriverManager.getConnection(admin.getDbUrl(), admin.getDbUsername(), admin.getDbPassword());
           

        // Execute a query to fetch all staff members
            String query = "SELECT Id_Number,Name,Age,Department,Role,UserName FROM Lab_Staff_Details";
             pst = conn.prepareStatement(query);
             java.sql.ResultSet resultSet = pst.executeQuery(query);
        
        populateTable(resultSet);
        
        //------
        resultSet.close();
       

            
      }catch(Exception e){
          System.out.println(e.getMessage());
      }

    }

    private void populateTable(ResultSet resultSet) {
        try {
            DefaultTableModel model = (DefaultTableModel) tblStaff.getModel();
            model.setRowCount(0);

            // Get metadata to dynamically fetch column names
            ResultSetMetaData metaData = resultSet.getMetaData();
            int columnCount = metaData.getColumnCount();

            // Create an array to hold column names
            String[] columnNames = new String[columnCount];
            for (int i = 1; i <= columnCount; i++) {
                columnNames[i - 1] = metaData.getColumnName(i);
            }

            // Set column names to the table model
            model.setColumnIdentifiers(columnNames);

            // Populate the table with the fetched data
            while (resultSet.next()) {
                Object[] rowData = {
                resultSet.getInt("Id_Number"), // Use getInt for integer column
                resultSet.getString("Name"),
                resultSet.getInt("Age"),
                resultSet.getString("Department"),
                resultSet.getString("Role"),
                resultSet.getString("UserName")
                // Add other columns if needed
            };
            model.addRow(rowData);
        }

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    
    
    

   

}
